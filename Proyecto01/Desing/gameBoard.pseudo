GameBoard class do
	//atributes
	set gameBoard := null
	set boardFigures := null
	constructor GameBoard (rowCount, colCount) do 
			if (rowCount >=  AND colCount >= 3) do
				gameBoard := new Cell[rowCount][colCount]
			end 
			else do 
				throw ERR
			end
	end
	procedure read() do
		for rowIndex to gameBoard(row) do 
			for colIndex to gameBoard(col) do 
				input cellString
				set currentCell := new Cell(cellString, rowIndex, colIndex)
				gameBoard[rowIndex][colIndex] = currentCell;
			end
		end
	end
	function validate() do
		for 0 to gameBoard(row) do 
			for 0 to gameBoard(col) do 
				if(NOT gameBoard[rowIndex][colIndex].validate()) do
					return false
				end
			end
		end
		return true
	end

	procedure print() do 
		output gameBoard
	end

	procedure searchBoardFigures() do
		for rowIndex to gameBoard(row) do 
			for colIndex to gameBoard(col) do 
				if gameBoard[rowIndex][colIndex].horizontalFigure == null do
					figures add searchHorizontalFigure(rowIndex, colIndex) only if has 3 or more elements
				end

				if gameBoard[rowIndex][colIndex].verticalFigure == null do
					figures add searchVerticalFigure(rowIndex, colIndex) only if has 3 or more elements
				end

				searchLFigure()
			end
		end

	end

	procedure searchHorizontalFigure(rowIndex, colIndex) do 
		set currentFigure = new Figure("H")
		if neighboor cell equals to current do
			currentFigure := recursiveHorizontalSearch(curentFigure,rowIndex + 0, colIndex + 1)
		end 
	end

	function recursiveHorizontalSearch(curentFigure, rowIndex, colIndex) do 
		curentFigure add currentCell
		current cell reference figure
		if  rowIndex >= gameBoard(col) OR NOT neighboor cell equals to current  do 
			return curentFigure
		end
		return recursiveHorizontalSearch(curentFigure,rowIndex + 0, colIndex + 1)	
	end

	
	procedure searchVerticalalFigure(rowIndex, colIndex) do 
		set currentFigure = new Figure("V")
		if neighboor cell equals to current do
			currentFigure := recursiveVerticalSearch(curentFigure,rowIndex + 1, colIndex + 0)
		end 
	end

	function recursiveVerticalalSearch(curentFigure, rowIndex, colIndex) do 
		curentFigure add currentCell
		current cell reference figure
		if rowIndex >= gameBoard(row) OR  NOT neighboor cell equals to current do 
			return curentFigure
		end
		return recursiveVerticalSearch(curentFigure,rowIndex + 1, colIndex + 0)	
	end


	procedure searchLFigure(rowIndex, colIndex) do 
		if gameBoard[rowIndex][colIndex] have horizontalFigure and verticalFigure and Lfigure == null do 
			set LFigure := new Figure('L')
			LFigure.figure.add(horizontalFigure and verticalFigure cells)

		end
	end



	procedure eliminateFigure() do 
		set eliminateFigure = selectFigureToEliminate()

		eliminateFigure[0].determinateType(eliminateFigure)

	end


	function selectFigureToEliminate() do
		for rowIndex to gameBoard(row) do 
			for colIndex to gameBoard(col) do 
				if currentCell.hasFigure() do 
					return Figure.priorityFigure()
				end
			end
		end

		return null
	end






end class 

