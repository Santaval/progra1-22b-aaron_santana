set row_count := input row_count
set col_count := input col_count
set start_row := input start_row 
set start_col := input start_col 
set startCell := concatNums (start_row, start_col)
set map := generateMatrix(row_count, col_count)
set treasureWayCells := calculateTreasureWay(map, startCell)
printTableSymbols(map, treasureMapWay)






function concatNums(int num1, int num2){
    set finalNum := String.valueOf(valor) +   String.valueOf(resultado);
    return  Integer.parseInt(cadenaResultante); 
 }


function generateMatrix(row_count, col_count) do 


    set matrix := int[row_count][col_count]

    for (col_index = 0 to col_count) do 

        for (row_index = 0 to row_count) do 

        matrix[col_index][row_index] = input nextLong

        end

    end

    return matrix
end


calculateTreasureWay(map, startCell) do 
    set totalCells = calculateSteps(map, startCell)
    set treasureMapWay = int[]
    set int[] currentCell :=  separateDigits(startCell)
    set previousNumber := 0;
    set err := false
    set cellsCounter  = 0
    


        while startCell != previousNumber and !err  do 

            set nextCell := map[currentCell[0]][currentCell[1]]
    
            if(nextCell > (map.lengt + map[col].lenght))  do
                output err
                err := true
            end
    
            else if (nextCell < 0 ) do 
                print sea
                err := true
            end

            else if (checkLoops(treasureMapWay, nextCell)) do 
                print loop
                endLoop := true
            end

            else if (previousNumber == currentCell) do 
                output treasure
                cellsCounter ++ 
                treasureMapWay[cellsCounter] := concatNums(currentCell[0][currentCell[1])
            end
    
            else do 
                cellsCounter ++ 
                treasureMapWay[cellsCounter] := concatNums(currentCell[0][currentCell[1])
                previousNumber := concatNums(currentCell[0][currentCell[1])
                startCell = nextCell
                currentCell := separateDigits(startCell)
            end
            
        end
        
        return treasureMapWay


end


function calculateSteps (map ,startCell) do 
    set int[] currentCell :=  separateDigits(startCell)
    set previousNumber := 0;
    set err := false
    set cellsCounter  = 0
    while startCell != previousNumber and !err  do 

        set nextCell := map[currentCell[0]][currentCell[1]]

        if(nextCell > (map.lengt + map[col].lenght))  do
            err := true
        end

        else if (cell < 0 ) do 
            err := true
        end

        else if (cellsCouter > (map.lengt * map[col].lenght)) do 
            endLoop := true
        end

        else if (previousNumber == currentCell) do 
            cellsCounter ++
            endLoop := true
        end

        else do 
            cellsCounter ++
        end
        
    end

    return cellsCounter

 end


 
function separateDigits(num) do 

    int[] digits = new int[2]
    num.toChatArray()

    for count to 2 do 
        digits[count] = num[count]
    end

end





function checkValue( intArray, values) do 
    for counter1 to arrayLenght do 
        if  intArray[counter1] == value do 
            return true
        end
    end
    return false

 end



procedure printTableSymbols(map, treasureMapWay) do 

    if(cell < 0) output ~
    else if (checkValue(treasureMapWay, cell)) output .
    else if (cell == treasureMapWay[treasureMapWay.lenght-1]) output X
    if (cell == concatNums(counter1, counter2)) output !
    else output " "



end








 procedure pintSymbol(Symbol) do 
    output symbil
 end